import os
import shutil
from typing import Dict, Any
from langchain_community.vectorstores import Chroma
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain_community.document_loaders import PyPDFLoader, TextLoader


# -------------------------------------------------
# üîπ Î¨∏ÏÑú Î°úÎçî (PDF / TXT ÏßÄÏõê)
# -------------------------------------------------
def _load_docs(file_path: str):
    ext = os.path.splitext(file_path)[1].lower()
    if ext == ".pdf":
        return PyPDFLoader(file_path).load()
    return TextLoader(file_path, encoding="utf-8").load()


# -------------------------------------------------
# üîπ ÏÑ∏ÏÖò ÏÉùÏÑ± (ÎçÆÏñ¥Ïì∞Í∏∞ ÌóàÏö©)
# -------------------------------------------------
def create_or_reset_session(chat_id: str, job_file_path: str):
    """
    [KO] Í∏∞Ï°¥ ÏÑ∏ÏÖòÏù¥ Ï°¥Ïû¨Ìï¥ÎèÑ Ïò§Î•ò ÏóÜÏù¥ ÎçÆÏñ¥Ïì∞Í∏∞ Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Í≥Ñ.
         Cloud / Local ÌôòÍ≤Ω ÏûêÎèô Í∞êÏßÄ ÌõÑ ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•Ìï©ÎãàÎã§.
    """

    # Cloud ÌôòÍ≤ΩÏóêÏÑúÎäî /mount/temp, Î°úÏª¨ÏóêÏÑúÎäî db ÏÇ¨Ïö©
    base_dir = "/mount/temp" if os.path.exists("/mount/temp") else "db"
    persist_dir = os.path.join(base_dir, "sessions", chat_id)
    os.makedirs(persist_dir, exist_ok=True)  # ‚ùó ÎîîÎ†âÌÜ†Î¶¨ ÎØ∏Î¶¨ ÏÉùÏÑ±

    # Í∏∞Ï°¥ Ïª¨Î†âÏÖò ÌååÏùºÏù¥ ÏûàÏñ¥ÎèÑ ÏÇ≠Ï†úÌïòÏßÄ ÏïäÏùå ‚Üí ÎçÆÏñ¥Ïì∞Í∏∞ Í∞ÄÎä•
    docs = _load_docs(job_file_path)
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = text_splitter.split_documents(docs)
    if not chunks:
        raise ValueError("‚ö†Ô∏è Î¨∏ÏÑúÍ∞Ä ÎπÑÏñ¥ÏûàÍ±∞ÎÇò Ï≤≠ÌÅ¨ Î∂ÑÌï†Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")

    embeddings = OpenAIEmbeddings(model="text-embedding-3-small")

    # üîß Í∏∞Ï°¥ DBÍ∞Ä ÏûàÏñ¥ÎèÑ ÏÉàÎ°ú Ï∂îÍ∞Ä(ÏóÖÎç∞Ïù¥Ìä∏) Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
    try:
        db = Chroma(
            persist_directory=persist_dir,
            embedding_function=embeddings,
            collection_name=f"job-{chat_id}",
        )
        db.add_documents(chunks)  # Í∏∞Ï°¥ Î≤°ÌÑ∞DB ÏúÑÏóê Ï∂îÍ∞Ä
        db.persist()
        print(f"‚ôªÔ∏è ÏÑ∏ÏÖò ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {chat_id} (path: {persist_dir})")
    except Exception:
        # ÌòπÏãú DBÍ∞Ä ÏÜêÏÉÅÎêú Í≤ΩÏö∞ ÏïàÏ†ÑÌïòÍ≤å Ïû¨ÏÉùÏÑ±
        shutil.rmtree(persist_dir, ignore_errors=True)
        os.makedirs(persist_dir, exist_ok=True)
        Chroma.from_documents(
            chunks,
            embedding=embeddings,
            persist_directory=persist_dir,
            collection_name=f"job-{chat_id}",
        )
        print(f"‚úÖ ÏÉà ÏÑ∏ÏÖòÏù¥ Ïû¨ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: {chat_id} (path: {persist_dir})")

    return {"chat_id": chat_id, "persist_dir": persist_dir}


# -------------------------------------------------
# üîπ ÏÑ∏ÏÖò Ï¢ÖÎ£å (Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú)
# -------------------------------------------------
def end_session(chat_id: str):
    base_dir = "/mount/temp" if os.path.exists("/mount/temp") else "db"
    persist_dir = os.path.join(base_dir, "sessions", chat_id)
    if os.path.exists(persist_dir):
        shutil.rmtree(persist_dir, ignore_errors=True)
        print(f"üßπ ÏÑ∏ÏÖòÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§: {chat_id}")


# -------------------------------------------------
# üîπ Ï±ÑÏö©Í≥µÍ≥† Ïª®ÌÖçÏä§Ìä∏ Ï°∞Ìöå
# -------------------------------------------------
def retrieve_job_context(chat_id: str, query: str = "Evaluate candidate against this job", k: int = 4) -> str:
    base_dir = "/mount/temp" if os.path.exists("/mount/temp") else "db"
    persist_dir = os.path.join(base_dir, "sessions", chat_id)
    if not os.path.isdir(persist_dir):
        return "No job description found in session context."

    try:
        embeddings = OpenAIEmbeddings(model="text-embedding-3-small")
        db = Chroma(
            persist_directory=persist_dir,
            embedding_function=embeddings,
            collection_name=f"job-{chat_id}",
        )
        docs = db.similarity_search(query, k=k)
        if not docs:
            return "No job description found in session context."
        return "\n\n".join(d.page_content for d in docs if getattr(d, "page_content", "").strip())
    except Exception as e:
        print(f"‚ö†Ô∏è retrieve_job_context ÏóêÎü¨: {e}")
        return "No job description found in session context."
